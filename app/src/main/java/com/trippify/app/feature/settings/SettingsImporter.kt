package com.trippify.app.feature.settings

import android.content.Context
import android.net.Uri
import com.trippify.app.core.config.AppConfiguration
import com.trippify.app.data.SettingsSnapshot
import com.trippify.app.data.SettingsStore
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONObject

/**
 * Restores user preferences from a JSON payload previously generated by [SettingsExporter]. The
 * importer is tolerant of missing fields so older backups remain compatible.
 */
class SettingsImporter(
    private val context: Context,
    private val settingsStore: SettingsStore
) {
    suspend fun importFrom(uri: Uri): Result<Unit> = runCatching {
        val json = readContent(uri)
        val payload = JSONObject(json)
        val settingsJson = payload.optJSONObject("settings") ?: JSONObject()
        val snapshot = SettingsSnapshot(
            hapticsEnabled = settingsJson.optBoolean("hapticsEnabled", true),
            audioEnabled = settingsJson.optBoolean("audioEnabled", true),
            particleTrailsEnabled = settingsJson.optBoolean("particleTrailsEnabled", false),
            audioReactiveEnabled = settingsJson.optBoolean("audioReactiveEnabled", true),
            multiColorRipples = settingsJson.optBoolean("multiColorRipples", true),
            selectedSceneId = settingsJson.optString("selectedSceneId", AppConfiguration.defaultSceneId),
            lastSoundscapeId = settingsJson.optString("lastSoundscapeId", SettingsStore.DEFAULT_SOUNDSCAPE),
            premiumUnlocked = settingsJson.optBoolean("premiumUnlocked", false),
            adsEnabled = settingsJson.optBoolean("adsEnabled", true)
        )
        settingsStore.applySnapshot(snapshot)
    }

    private suspend fun readContent(uri: Uri): String = withContext(Dispatchers.IO) {
        context.contentResolver.openInputStream(uri)?.use { stream ->
            stream.bufferedReader(Charsets.UTF_8).readText()
        } ?: error("Unable to open import source")
    }
}
